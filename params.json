{"body":"Developing a modern web page (or *web app*) is complex. In addition to all the\r\nstandards of W3C, along with its best practices that has evolved over the\r\nyears, you need to have JavaScript that runs efficiently and are organized in\r\nsuch a way that it is easy to maintain as the code grows.\r\n\r\nThe site you are creating has to look and behave consistently cross different\r\nbrowsers and platforms, such as tablets and phones. And it has to do [a lot of\r\nthings](https://www.scirra.com/blog/74/making-a-fast-website) to be fast.\r\nLastly, the process of releasing updates has to be as painless and quick as\r\npossible.\r\n\r\nSo how do we cope with all of these requirements? We use tools.\r\n\r\n## Grunt -- a task based build tool\r\n\r\nI recently spent some time setting up [Grunt](http://gruntjs.com/) for an [offline reindeer mark\r\nregister web app](http://rein.ligretto.no/) I'm building at my spare time. In\r\nfact, I sat almost eight hours straight because it appeared to solve every\r\nproblem I had, in an easy and fun way.\r\n\r\nGrunt is a task based build tool that can do pretty much anything. Sure, you could still use ant, phing, rake, or whatever you are used to using. Though, I think it makes sense to test out and use tools written in the same language as can be found in the project you are working in, i.e. by limiting the scope of the developer environment, and ease the process of writing custom plugins and so on.\r\n\r\nGrunt can be installed via [npm](https://npmjs.org/) by running `npm install -g grunt`, \r\nand you run it by issuing `grunt` in the directory containing the `grunt.js` file.\r\nThis will typically be the project root.\r\n\r\nIn the next sections, I will show some of the tasks I have set up Grunt to run at various times.\r\n\r\n## Pre-compile templates\r\n\r\nI'm using [Underscore.js templates](http://documentcloud.github.com/underscore/#template),\r\nand it is convenient to write these in .html files and have them converted to\r\npre-compiled JavaScript Templates (JST) available to be used throughout the\r\ncode. Ergo, the client has to do less work, and the views can be rendered\r\nsome nano seconds faster.\r\n\r\nBy using [the JST plugin](https://github.com/gruntjs/grunt-contrib-jst/), \r\nthe following snippet will take all html files found in `src/templates`, compile them,\r\nand finally add them to the `src/templates/compiled.js` file under the namespace variable specified.\r\n\r\n```\r\njst: {\r\n    compile: {\r\n        options: {\r\n            namespace: 'REIN.templates',\r\n            processName: function (filename) {\r\n                return filename.split('/').pop().split('.')[0];\r\n            }\r\n        },\r\n        files: {\r\n            'src/templates/compiled.js': ['src/templates/*.html']\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nSince this is an extra plugin, remember to load it somewhere in your `grunt.js` file:\r\n\r\n```\r\ngrunt.loadNpmTasks('grunt-contrib');\r\n```\r\n\r\n## Minify\r\n\r\nEven though minifying / uglifying the JavaScript source code [might be bad][]\r\nfor the open web, reducing the size of the application becomes quite important\r\nfor an offline mobile web app when fighting cache limits of 5MB for some\r\ndevices.\r\n\r\n(The source code of what I'm creating is however freely available under AGPLv3 on [github][].)\r\n\r\n```\r\npkg: '<json:package.json>',\r\nmin: {\r\n    dist: {\r\n        src: ['src/app.js', 'src/utils.js', 'src/register.js',\r\n              'src/templates/compiled.js', 'src/setup.js'],\r\n        dest: 'dist/<%= pkg.name %>.modules.min.js'\r\n    }\r\n}\r\n```\r\n\r\nHere, the default **min** task will take my source files (including the templates mentioned in the previous section), concatenate, and minify them. Notice how the `package.json` file is read in,\r\nand how a property of this is used in the `dest` property.\r\n\r\n [might be bad]: http://stackoverflow.com/questions/8139679/doesnt-javascript-minification-hurt-open-source\r\n [github]: https://github.com/ruudud/reindeerfinder\r\n\r\n\r\n## Concatenate\r\n\r\nEven more important for page load speed, is to combine the source files (CSS\r\nand JavaScript separately, of course) to reduce the number of requests the\r\nclient has to make to the web server.\r\n\r\nThis is a built-in task in grunt, and in this more advanced snippet,\r\nyou also see how to reference file lists and variables from other places in the file:\r\n\r\n```\r\npkg: '<json:package.json>',\r\nmeta: {\r\n    banner: '/* <%= pkg.name %>\\n' +\r\n        '* <%= pkg.homepage %> \\n' +\r\n        '* Copyright (c) <%= grunt.template.today(\"yyyy\") %>' +\r\n        ' <%= pkg.author.name %>\\n' +\r\n        '* Licensed under AGPLv3. */'\r\n},\r\nconcat: {\r\n    dist: {\r\n        src: ['<banner>', 'lib/modernizr.min.js',\r\n              'lib/underscore.min.js', 'lib/backbone.min.js',\r\n              '<config:min.dist.dest>'],\r\n        dest: 'dist/<%= pkg.name %>.min.js'\r\n    }\r\n}\r\n```\r\n\r\nThe end result is a file with a banner at the top, followed by dependencies\r\nand the file generated in the previous section.\r\n\r\n\r\n## HTML differences between the developer version and production code\r\n\r\nUntil I get [source maps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/) \r\nintegrated into the build, I like to link the JavaScript source files in to the HTML to easily debug my code. But before creating a release, I would like to link the concatenated and minified file.\r\n\r\nFrom my HTML:\r\n```\r\n<!--(if target dummy)><!-->\r\n<script src=\"lib/modernizr.min.js\" type=\"text/javascript\"></script>\r\n<script src=\"lib/underscore.min.js\" type=\"text/javascript\"></script>\r\n<script src=\"lib/backbone.min.js\" type=\"text/javascript\"></script>\r\n<script src=\"src/app.js\" type=\"text/javascript\"></script>\r\n<script src=\"src/utils.js\" type=\"text/javascript\"></script>\r\n// ...\r\n<!--<!(endif)-->\r\n<!--(if target dist)>\r\n<script src=\"reindeerfinder.min.js\" type=\"text/javascript\"></script>\r\n<script type=\"text/javascript\">var _gaq = _gaq || []; //...\r\n<!(endif)-->\r\n```\r\n\r\nAnd the corresponding grunt configuration:\r\n\r\n```\r\ntargethtml: {\r\n    dist: {\r\n        input: 'index.html',\r\n        output: 'dist/index.html'\r\n    }\r\n}\r\n```\r\n\r\nI use this technique to avoid the [appcache](http://diveintohtml5.info/offline.html) and Google Analytics when testing locally. \r\n\r\n\r\n## Do stuff when files change\r\n\r\nWhen developing, I like to have my code tested automatically, both static checks with [jshint](http://jshint.com/) and unit tests with [Buster](http://busterjs.org).\r\n\r\nTo do this, I use a combination of the **watch** task, and the [Buster plugin](https://npmjs.org/package/grunt-buster).\r\n\r\n```\r\nbuster: {\r\n    test: { config: 'test/buster.js' }\r\n},\r\nwatch: {\r\n    browserscripts: {\r\n        files: ['src/**/*.js'],\r\n        tasks: ['lint:browser']\r\n    },\r\n    tests: {\r\n        files: ['src/**/*.js', 'test/**/*_test.js'],\r\n        tasks: ['buster']\r\n    }\r\n}\r\n```\r\n\r\nAgain, remember to load the plugin:\r\n\r\n```\r\ngrunt.loadNpmTasks('grunt-buster');\r\n```\r\n\r\n## Defining tasks\r\n\r\nTo define tasks, which is executed using `grunt <task>`, register them at the bottom of the file like this:\r\n\r\n```\r\ngrunt.registerTask('release', 'jst lint buster clean:dist min concat mincss targethtml replace copy clean:temp');\r\n```\r\n\r\n## Conclusion\r\n\r\nYou can do a lot of things with Grunt, and so far, I'm very happy with using it.\r\nThis was just some examples of what is being done in the [complete file](https://github.com/ruudud/ReindeerFinder/blob/master/grunt.js) I have created for my little project. \r\n\r\nHave a look there to get more inspiration!\r\n\r\nHit [@ruudud](https://twitter.com/ruudud) at Twitter if you have any questions.\r\n","name":"From the tool box: Grunt","tagline":"Web development is getting complex.","google":"UA-36931325-1","note":"Don't delete this file! It's used internally to help with page regeneration."}